// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// parachain_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --record-proof
// --json-file
// raw.json
// --output
// ./benchmarks/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	#[rustfmt::skip]
	fn hotfix_remove_delegation_requests(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn hotfix_update_candidate_pool_value(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn set_staking_expectations() -> Weight;
	#[rustfmt::skip]
	fn set_inflation() -> Weight;
	#[rustfmt::skip]
	fn set_parachain_bond_account() -> Weight;
	#[rustfmt::skip]
	fn set_parachain_bond_reserve_percent() -> Weight;
	#[rustfmt::skip]
	fn set_total_selected() -> Weight;
	#[rustfmt::skip]
	fn set_collator_commission() -> Weight;
	#[rustfmt::skip]
	fn set_blocks_per_round() -> Weight;
	#[rustfmt::skip]
	fn join_candidates(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn execute_leave_candidates(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn go_offline() -> Weight;
	#[rustfmt::skip]
	fn go_online() -> Weight;
	#[rustfmt::skip]
	fn candidate_bond_more() -> Weight;
	#[rustfmt::skip]
	fn schedule_candidate_bond_less() -> Weight;
	#[rustfmt::skip]
	fn execute_candidate_bond_less() -> Weight;
	#[rustfmt::skip]
	fn cancel_candidate_bond_less() -> Weight;
	#[rustfmt::skip]
	fn delegate(x: u32, y: u32, ) -> Weight;
	#[rustfmt::skip]
	fn schedule_leave_delegators() -> Weight;
	#[rustfmt::skip]
	fn execute_leave_delegators(x: u32, ) -> Weight;
	#[rustfmt::skip]
	fn cancel_leave_delegators() -> Weight;
	#[rustfmt::skip]
	fn schedule_revoke_delegation() -> Weight;
	#[rustfmt::skip]
	fn delegator_bond_more() -> Weight;
	#[rustfmt::skip]
	fn schedule_delegator_bond_less() -> Weight;
	#[rustfmt::skip]
	fn execute_revoke_delegation() -> Weight;
	#[rustfmt::skip]
	fn execute_delegator_bond_less() -> Weight;
	#[rustfmt::skip]
	fn cancel_revoke_delegation() -> Weight;
	#[rustfmt::skip]
	fn cancel_delegator_bond_less() -> Weight;
	#[rustfmt::skip]
	fn round_transition_on_initialize(x: u32, y: u32, ) -> Weight;
	#[rustfmt::skip]
	fn pay_one_collator_reward(y: u32, ) -> Weight;
	#[rustfmt::skip]
	fn base_on_initialize() -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:0)
	#[rustfmt::skip]
	fn hotfix_remove_delegation_requests(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_000
			.saturating_add((10_993_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:4 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn hotfix_update_candidate_pool_value(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 68_000
			.saturating_add((13_917_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_staking_expectations() -> Weight {
		(18_396_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_inflation() -> Weight {
		(55_125_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	#[rustfmt::skip]
	fn set_parachain_bond_account() -> Weight {
		(17_848_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	#[rustfmt::skip]
	fn set_parachain_bond_reserve_percent() -> Weight {
		(17_585_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	#[rustfmt::skip]
	fn set_total_selected() -> Weight {
		(20_155_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	#[rustfmt::skip]
	fn set_collator_commission() -> Weight {
		(16_616_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_blocks_per_round() -> Weight {
		(57_718_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:0 w:1)
	// Storage: ParachainStaking BottomDelegations (r:0 w:1)
	#[rustfmt::skip]
	fn join_candidates(x: u32, ) -> Weight {
		(61_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((76_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(60_196_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((53_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_000
			.saturating_add((37_613_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads((5 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(61_854_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((50_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn go_offline() -> Weight {
		(27_606_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn go_online() -> Weight {
		(27_392_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn candidate_bond_more() -> Weight {
		(45_854_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_candidate_bond_less() -> Weight {
		(26_260_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn execute_candidate_bond_less() -> Weight {
		(54_540_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_candidate_bond_less() -> Weight {
		(22_331_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn delegate(x: u32, y: u32, ) -> Weight {
		(91_198_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((190_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 2_000
			.saturating_add((149_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_leave_delegators() -> Weight {
		(27_050_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 38_000
			.saturating_add((33_597_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_leave_delegators() -> Weight {
		(23_633_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_revoke_delegation() -> Weight {
		(37_839_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn delegator_bond_more() -> Weight {
		(61_994_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_delegator_bond_less() -> Weight {
		(36_144_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_revoke_delegation() -> Weight {
		(92_412_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_delegator_bond_less() -> Weight {
		(81_730_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_revoke_delegation() -> Weight {
		(32_485_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_delegator_bond_less() -> Weight {
		(34_080_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
	// Storage: System Account (r:302 w:301)
	// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:9 w:0)
	// Storage: ParachainStaking TopDelegations (r:9 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:2400 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:10)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	#[rustfmt::skip]
	fn round_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 901_000
			.saturating_add((962_857_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 3_000
			.saturating_add((3_194_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads((302 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(T::DbWeight::get().writes(187 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	#[rustfmt::skip]
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		(42_452_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((16_753_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	#[rustfmt::skip]
	fn base_on_initialize() -> Weight {
		(5_012_000 as Weight)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:0)
	#[rustfmt::skip]
	fn hotfix_remove_delegation_requests(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_000
			.saturating_add((10_993_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:4 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn hotfix_update_candidate_pool_value(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 68_000
			.saturating_add((13_917_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_staking_expectations() -> Weight {
		(18_396_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_inflation() -> Weight {
		(55_125_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	#[rustfmt::skip]
	fn set_parachain_bond_account() -> Weight {
		(17_848_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	#[rustfmt::skip]
	fn set_parachain_bond_reserve_percent() -> Weight {
		(17_585_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	#[rustfmt::skip]
	fn set_total_selected() -> Weight {
		(20_155_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	#[rustfmt::skip]
	fn set_collator_commission() -> Weight {
		(16_616_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	#[rustfmt::skip]
	fn set_blocks_per_round() -> Weight {
		(57_718_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:0 w:1)
	// Storage: ParachainStaking BottomDelegations (r:0 w:1)
	#[rustfmt::skip]
	fn join_candidates(x: u32, ) -> Weight {
		(61_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((76_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(60_196_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((53_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_000
			.saturating_add((37_613_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads((5 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(61_854_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((50_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn go_offline() -> Weight {
		(27_606_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn go_online() -> Weight {
		(27_392_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn candidate_bond_more() -> Weight {
		(45_854_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_candidate_bond_less() -> Weight {
		(26_260_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	#[rustfmt::skip]
	fn execute_candidate_bond_less() -> Weight {
		(54_540_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_candidate_bond_less() -> Weight {
		(22_331_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn delegate(x: u32, y: u32, ) -> Weight {
		(91_198_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((190_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 2_000
			.saturating_add((149_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_leave_delegators() -> Weight {
		(27_050_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 38_000
			.saturating_add((33_597_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_leave_delegators() -> Weight {
		(23_633_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_revoke_delegation() -> Weight {
		(37_839_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn delegator_bond_more() -> Weight {
		(61_994_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn schedule_delegator_bond_less() -> Weight {
		(36_144_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_revoke_delegation() -> Weight {
		(92_412_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	#[rustfmt::skip]
	fn execute_delegator_bond_less() -> Weight {
		(81_730_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRevokeRequestCount (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_revoke_delegation() -> Weight {
		(32_485_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking DelegatorScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking DelegatorScheduledRequestDecreaseAmount (r:1 w:1)
	#[rustfmt::skip]
	fn cancel_delegator_bond_less() -> Weight {
		(34_080_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
	// Storage: System Account (r:302 w:301)
	// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:9 w:0)
	// Storage: ParachainStaking TopDelegations (r:9 w:0)
	// Storage: ParachainStaking DelegatorScheduledRequests (r:2400 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:10)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	#[rustfmt::skip]
	fn round_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 901_000
			.saturating_add((962_857_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 3_000
			.saturating_add((3_194_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads((302 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(RocksDbWeight::get().writes(187 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	#[rustfmt::skip]
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		(42_452_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((16_753_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	#[rustfmt::skip]
	fn base_on_initialize() -> Weight {
		(5_012_000 as Weight)
	}
}
